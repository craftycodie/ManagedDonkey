#pragma once

#include "memory/bitstream.hpp"

enum e_network_session_parameter_type
{
	_network_session_parameter_type_session_size = 0,
	_network_session_parameter_type_session_mode,
	_network_session_parameter_type_privacy_mode,
	_network_session_parameter_type_ui_game_mode,
	_network_session_parameter_type_dedicated_server_session_state,
	_network_session_parameter_type_start_mode,
	_network_session_parameter_type_ui_state,
	_network_session_parameter_type_end_game,
	_network_session_parameter_type_map,
	_network_session_parameter_type_initial_participants,
	_network_session_parameter_type_game_instance,
	_network_session_parameter_type_random_seed,
	_network_session_parameter_type_language,
	_network_session_parameter_type_determinism_version,
	_network_session_parameter_type_simulation_protocol,
	_network_session_parameter_type_campaign_difficulty,
	_network_session_parameter_type_campaign_ative_primary_skulls,
	_network_session_parameter_type_campaign_ative_secondary_skulls,
	_network_session_parameter_type_campaign_metagame_scoring,
	_network_session_parameter_type_campaign_insertion_point,
	_network_session_parameter_type_game_variant,
	_network_session_parameter_type_map_variant,
	_network_session_parameter_type_saved_film,
	_network_session_parameter_type_saved_film_game_options,
	_network_session_parameter_type_game_start_status,
	_network_session_parameter_type_countdown_timer,
	_network_session_parameter_type_voice_repeater,
	_network_session_parameter_type_requested_remote_join_data,
	_network_session_parameter_type_remote_join_data,
	_network_session_parameter_type_matchmaking_arbitration_nonce,
	_network_session_parameter_type_matchmaking_hopper_list,
	_network_session_parameter_type_matchmaking_game_list,
	_network_session_parameter_type_matchmaking_requested_hopper,
	_network_session_parameter_type_matchmaking_hopper,
	_network_session_parameter_type_matchmaking_abort_requested,
	_network_session_parameter_type_matchmaking_search_preference,
	_network_session_parameter_type_matchmaking_progress,
	_network_session_parameter_type_matchmaking_progress_search_criteria,
	_network_session_parameter_type_matchmaking_peer_evict_mask,
	_network_session_parameter_type_matchmaking_rematch_data,
	_network_session_parameter_type_matchmaking_hopper_statistics,
	_network_session_parameter_type_matchmaking_tip,
	_network_session_parameter_type_matchmaking_suppress_progress,
	_network_session_parameter_type_synchronous_out_of_sync,
	_network_session_parameter_type_matchmaking_messaging,
	_network_session_parameter_type_host_frame_quality,
	_network_session_parameter_type_request_campaign_quit,
	_network_session_parameter_type_leader_properties,
	_network_session_parameter_type_lobby_vote_set,

	k_network_session_parameter_type_count
};

struct c_network_session_parameter_type_collection
{
	using encode_t = void __cdecl(c_bitstream*, void const*, long);
	using decode_t = bool __cdecl(c_bitstream*, void*, long);

	struct s_network_session_parameter_type
	{
		bool initialized;
		char const* session_parameter_name;

		encode_t* update_encode;
		decode_t* update_decode;
		long update_size;

		encode_t* change_request_encode;
		decode_t* change_request_decode;
		long change_request_size;
	};

public:
	void check_session_parameter_types() const;
	void clear_session_parameter_types();
	void register_session_parameter_type(
		e_network_session_parameter_type session_parameter_type,
		char const* session_parameter_name, 
		encode_t* update_encode,
		decode_t* update_decode,
		long update_size, 
		encode_t* change_request_encode,
		decode_t* change_request_decode,
		long change_request_size
	);

protected:
	s_network_session_parameter_type m_session_parameter_types[k_network_session_parameter_type_count];
};
static_assert(sizeof(c_network_session_parameter_type_collection) == 0x620);
